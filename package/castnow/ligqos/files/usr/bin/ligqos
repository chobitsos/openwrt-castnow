#!/bin/sh
. /lib/functions.sh

msg() {
	echo "[QOS] " "$@"
}

load_ifnames() {
	LAN_IF=$(uci -p /var/state get network.lan.ifname)
	WAN_IFS=""

	TMP=$(uci -p /var/state show network|grep -vE "loopback|lan"|grep "network.*.ifname"|sed 's/network\..*\.ifname=//'|sort -u)
	for WAN_IF in $TMP ; do
		if [ "${WAN_IF:0:1}" == "@" ] ; then
			WAN_IF=$(uci -p /var/state get network.${WAN_IF:1}.ifname)
		fi

		echo $WAN_IFS | grep -q $WAN_IF || WAN_IFS="$WAN_IF $WAN_IFS"
	done
}

load_modules(){
[ ! -f /tmp/ligqos-modules ] && {
	insmod cls_fw
	insmod cls_u32
	insmod sch_hfsc
	insmod sch_sfq
	insmod sch_red
	insmod sch_htb
	insmod sch_prio
	insmod ipt_multiport
	insmod ipt_CONNMARK
	insmod ipt_length 
	insmod xt_connlimit
	insmod xt_connbytes
	insmod ipt_connbytes
	insmod em_u32
	insmod act_connmark
	insmod sch_ingress
	insmod act_mirred
	echo >/tmp/ligqos-modules
	}
}

qos_stop() {
	for WAN_IF in $WAN_IFS ; do
		tc qdisc del dev $WAN_IF root 2>/dev/null
	done

	tc qdisc del dev $LAN_IF root 2>/dev/null

	iptables -t mangle -F
	iptables -t mangle -X UP 2>/dev/null
	iptables -t mangle -X DOWN 2>/dev/null
}

qos_start(){
	msg "======================================================"
	msg "WAN : $WAN_IFS"
	msg "LAN : $LAN_IF"
	msg "======================================================"

	msg "Queue Initialize ..."
	for WAN_IF in $WAN_IFS ; do
		tc qdisc add dev $WAN_IF root handle 1: htb
	done
	tc qdisc add dev $LAN_IF root handle 1: htb

	msg "Iptables Initialize ..."
	iptables -t mangle -N UP
	iptables -t mangle -N DOWN

	for WAN_IF in $WAN_IFS ; do
		iptables -t mangle -I FORWARD -o $WAN_IF -j UP
	done
	iptables -t mangle -I FORWARD -o $LAN_IF -j DOWN

	msg "Done"
}

ip_limit() {
	msg "IP Rule : $@"

	ips=1
	[ -z $(echo "$1" |grep "-" ) ] && ips=0
	[ $ips = 1 ] && ip=$(echo $1 |awk -F '.' '{print $7}')
	[ $ips = 0 ] && ip=$(echo $1 |awk -F '.' '{print $4}')
	[ -n $(echo "$ip" |grep "/" ) ] && ip=$(echo $ip |awk -F '/' '{print $1}')																					  
	echo $ip
	[ ${#ip} -lt 3 ] && ip=0$ip
	[ ${#ip} -lt 3 ] && ip=0$ip
	[ $ips = 1 ] && var=2
	[ $ips = 0 ] && var=1

	### upload
	for WAN_IF in $WAN_IFS ; do
		tc class add dev $WAN_IF parent 1: classid 1:$var$ip htb rate $5kbps ceil $4kbps
		tc qdisc add dev $WAN_IF parent 1:$var$ip handle $var$ip sfq perturb 10
		tc filter add dev $WAN_IF parent 1: handle 0x$var$ip fw flowid 1:$var$ip
	done

	### download
	tc class add dev $LAN_IF parent 1: classid 1:$var$ip htb rate $3kbps ceil $2kbps
	tc qdisc add dev $LAN_IF parent 1:$var$ip handle $var$ip sfq perturb 10
	tc filter add dev $LAN_IF parent 1: handle 0x$var$ip fw flowid 1:$var$ip

	iptables -t mangle -A DOWN -d $1 -j MARK --set-mark 0x$var$ip
	iptables -t mangle -A UP -s $1 -j MARK --set-mark 0x$var$ip
}

# $mac $downc $downr $upc $upr
mac_limit() {
	msg "MAC Rule : $@"

	handle=3$(echo $1 |awk -F ':' '{print $6}')

	### upload
	if [ "$4" != "0" ] ; then
		for WAN_IF in $WAN_IFS ; do
			tc class add dev $WAN_IF parent 1: classid 1:$handle htb rate $5kbps ceil $4kbps
			tc qdisc add dev $WAN_IF parent 1:$handle handle $handle sfq perturb 10
			tc filter add dev $WAN_IF parent 1: handle 0x$handle fw flowid 1:$handle
			iptables -t mangle -A UP -m mac --mac-source $1 -j MARK --set-mark 0x$handle
		done
	fi

	### download
	if [ "$2" != "0" ] ; then
		tc class add dev $LAN_IF parent 1: classid 1:$handle htb rate $3kbps ceil $2kbps
		tc qdisc add dev $LAN_IF parent 1:$handle handle $handle sfq perturb 10
		tc filter add dev $LAN_IF parent 1: protocol ip prio 4 u32 match ether dst $1 flowid 1:$handle
	fi
}

conn_limit() {
	msg "Conn limit Rule : $@"

	iptables -t mangle -A FORWARD -p tcp -d $1 -m connlimit --connlimit-above $2 -j DROP
	iptables -t mangle -A FORWARD -p udp -d $1 -m connlimit --connlimit-above $3 -j DROP
}

ip_config_get() {
	config_get ip $1 ip
	config_get enable $1 enable
	config_get upc $1 upc
	config_get upr $1 upr
	config_get downc $1 downc
	config_get downr $1 downr
	[ "$upc" == "0" ] && upc=$((upr*102/100))
	[ "$downc" == "0" ] && downc=$((downr*102/100))
	[ "$enable" == "1" ] && ip_limit $ip $downc $downr $upc $upr
}

mac_config_get() {
	config_get mac $1 mac
	config_get enable $1 enable
	config_get upc $1 upc
	config_get upr $1 upr
	config_get downc $1 downc
	config_get downr $1 downr
	[ "$upc" == "0" ] && upc=$((upr*102/100))
	[ "$downc" == "0" ] && downc=$((downr*102/100))
	[ "$enable" == "1" ] && mac_limit $mac $downc $downr $upc $upr
}

conn_config_get() {
	config_get ip $1 ip
	config_get enable $1 enable
	config_get udp $1 udp
	config_get tcp $1 tcp
	[ "$enable" == "1" ] && conn_limit $ip $tcp $udp
}

load_ifnames
config_load castnow

case $1 in
	start) 
		load_modules
		qos_stop
		qos_start
		config_foreach ip_config_get ip-limit
		config_foreach mac_config_get mac-limit
		config_foreach conn_config_get conn-limit
	;;
	stop)
		qos_stop
	;;
esac
